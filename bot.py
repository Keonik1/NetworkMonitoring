from modules.pythonping import ping
import modules.discord
from modules.discord.ext import commands
import botinfo
import json
import time
import sys
import constants
import os
from modules.async_timeout import asyncio

#–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å –∫–∞–∫–æ–π –∑–Ω–∞–∫–∞ –±–æ—Ç –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
client = modules.discord.ext.commands.Bot(command_prefix = "!")

#–í—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞
@client.event
async def on_ready():
    print('–ë–æ—Ç –∑–∞–ª–æ–≥–∏–Ω–∏–ª—Å—è –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {0.user}'.format(client))

#–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
async def backgroundMonitoring():
    print('–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –≤–∫–ª—é—á–µ–Ω–∞')
    await client.wait_until_ready()         #–¥–æ–∂–¥–∞—Ç—å—Å—è –≤–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞
    channel = client.get_channel(botinfo.channelID)
    LastCheckChannel = client.get_channel(botinfo.LastCheckChannelID)
    await channel.send('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –¥–ª—è –≤—ã–∑–æ–≤–∞ —Å–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–∏—Å–∞—Ç—å "!–ø–æ–º–æ—â—å"')
    #print('–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ 2 –≤–∫–ª—é—á–µ–Ω–∞')                 #–¥–ª—è –¥–µ–±–∞–≥–∞
    while not client.is_closed():
        PathToJson = constants.devicesJson
        AnswerState = ''
        CountAnswers = 0

        #print('–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ 3 –≤–∫–ª—é—á–µ–Ω–∞')                 #–¥–ª—è –¥–µ–±–∞–≥–∞
        with open(PathToJson, 'r', encoding=constants.Encoding) as FileJSON:
            JSONData = json.loads(FileJSON.read())

            #print('–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ 4 –≤–∫–ª—é—á–µ–Ω–∞')                 #–¥–ª—è –¥–µ–±–∞–≥–∞
            lastCheckTime = JSONData["index"][str(0)]["currently time"]
            for i in range(0, (len(JSONData["index"]))):
                if JSONData["index"][str(i)]["past state"] != JSONData["index"][str(i)]["currently state"]:
                    #print('–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ 5 –≤–∫–ª—é—á–µ–Ω–∞')
                    AnswerState += f'''**–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {i+1}:** 
IP-–∞–¥—Ä–µ—Å: {JSONData["index"][str(i)]["IPadd"]}
Hostname: {JSONData["index"][str(i)]["hostname"]}
–ü—Ä–æ—à–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: __{JSONData["index"][str(i)]["past state"]}__
–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: __{JSONData["index"][str(i)]["currently state"]}__
–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞: {JSONData["index"][str(i)]["currently time"]}
             
             
'''
                #print('–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ 6 –≤–∫–ª—é—á–µ–Ω–∞')                 #–¥–ª—è –¥–µ–±–∞–≥–∞
                if len(AnswerState) > 1500:                         #—É –¥–∏—Å–∫–æ—Ä–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 2000 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                    #print('–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ 7 –≤–∫–ª—é—á–µ–Ω–∞')                 #–¥–ª—è –¥–µ–±–∞–≥–∞
                    await channel.send(AnswerState)
                    AnswerState = ''
                    CountAnswers += 1
        #print(len(AnswerState))                                    #–¥–ª—è –¥–µ–±–∞–≥–∞
        if len(AnswerState) > 0:
            await channel.send(AnswerState)
        else:
            if (CountAnswers == 0 and botinfo.SendLastCheck.lower() == 'on'):
                await LastCheckChannel.send(f'–ù–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑–º–µ–Ω–∏–≤—à–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {lastCheckTime}')

        await asyncio.sleep(botinfo.timeToGetStatus)

#–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
@client.command()
async def –ø–æ–º–æ—â—å(ctx):
    answer = '''**–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞**
!status __—Ç–∏–ø__ __–∑–Ω–∞—á–µ–Ω–∏–µ__ - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –≥–¥–µ:
                    - –í –ø–æ–ª–µ __—Ç–∏–ø__ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ - "ip" –∏–ª–∏ "host" –ø–æ IP-–∞–¥—Ä–µ—Å—É –∏ –∏–º–µ–Ω–∏ —Ö–æ—Å—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ;
                    - –í –ø–æ–ª–µ __–∑–Ω–∞—á–µ–Ω–∏–µ__ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –∏–º—è —Ö–æ—Å—Ç–∞, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞;
!all - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–µ–¥–µ–Ω–∏–π –æ–±–æ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö;
!dif - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–µ–¥–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ —Ç–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏ —Å–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ;
P.s.
–ö–∞–≤—ã—á–∫–∏ —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.
–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞: **__!status ip 127.0.0.1__** –∏–ª–∏ **__!status host test.test.ru__**
    '''
    await ctx.send(answer)

#–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
@client.command()
async def status(ctx, responce, value):  #response - ip –∏–ª–∏ hostname (host); value - —É–∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–∞–¥—Ä–µ—Å –∏–ª–∏ –∏–º—è)
    answerStatus = getstatus(responce.lower(), value)
    try:
        await ctx.send(answerStatus)
    except Exception():
        await ctx.send('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§î. –í–æ–∑–º–æ–∂–Ω–æ —É–∫–∞–∑–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∏—Å–∫–æ–º–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.')

#–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è –ø—Ä–æ—à–ª–æ–µ –∏ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@client.command()
async def dif(ctx):
    PathToJson = constants.devicesJson
    answerStatus = ''
    with open(PathToJson, 'r', encoding=constants.Encoding) as FileJSON:
        JSONData = json.loads(FileJSON.read())
        lastCheckTime = JSONData["index"][str(0)]["currently time"]
        for i in range(0, (len(JSONData["index"]))):
            if JSONData["index"][str(i)]["past state"] != JSONData["index"][str(i)]["currently state"]:
                answerStatus += f'''**–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {i+1}:** 
IP-–∞–¥—Ä–µ—Å: {JSONData["index"][str(i)]["IPadd"]}
Hostname: {JSONData["index"][str(i)]["hostname"]}
–ü—Ä–æ—à–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: __{JSONData["index"][str(i)]["past state"]}__
–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: __{JSONData["index"][str(i)]["currently state"]}__
–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞: {JSONData["index"][str(i)]["currently time"]}
             
             
'''
            if len(answerStatus) > 1500:                #—É –¥–∏—Å–∫–æ—Ä–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 2000 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
                #print(len(answerStatus))
                await ctx.send(answerStatus)
                answerStatus = ''
    #print(len(answerStatus))
    if len(answerStatus) > 0:
        await ctx.send(answerStatus)
    else:
        await ctx.send(f'–ù–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑–º–µ–Ω–∏–≤—à–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {lastCheckTime}')

#–û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
@client.command()
async def all(ctx):
    PathToJson = constants.devicesJson
    answerStatus = ''
    with open(PathToJson, 'r', encoding=constants.Encoding) as FileJSON:
        JSONData = json.loads(FileJSON.read())
        for i in range(0, (len(JSONData["index"]))):
            answerStatus += f'''**–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {i+1}:** 
{JSONData["index"][str(i)]["IPadd"]}
{JSONData["index"][str(i)]["hostname"]}
–ü—Ä–æ—à–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: __{JSONData["index"][str(i)]["past state"]}__
–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: __{JSONData["index"][str(i)]["currently state"]}__
–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞: {JSONData["index"][str(i)]["currently time"]}
             
             
'''
            if len(answerStatus) > 1500:
                #print(len(answerStatus))
                await ctx.send(answerStatus)
                answerStatus = ''
            
    #print(len(answerStatus))
    if len(answerStatus) > 0:
        await ctx.send(answerStatus)

#—Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –∫–æ–º–∞–Ω–¥–µ !status
def getstatus(TypeOfResponse, value):
    answer = None
    PathToJson = constants.devicesJson

    if TypeOfResponse == 'ip':
        with open(PathToJson, 'r', encoding=constants.Encoding) as FileJSON:
            JSONData = json.loads(FileJSON.read())
            indexDev = None
            for i in range(0, (len(JSONData["index"]))):
                if JSONData["index"][str(i)]["IPadd"] == str(value):
                    indexDev = i
                    break
            
            if indexDev == None:
                answer = '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!'
            else:
            # ** - –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –¥–∏—Å–∫–æ—Ä–¥–µ
            # __ - –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç –≤ –¥–∏—Å–∫–æ—Ä–¥–µ 
                answer = f'''**–ó–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:** 
{JSONData["index"][str(indexDev)]["IPadd"]}
{JSONData["index"][str(indexDev)]["hostname"]}
–ü—Ä–æ—à–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: __{JSONData["index"][str(indexDev)]["past state"]}__
–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: __{JSONData["index"][str(indexDev)]["currently state"]}__
–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞: {JSONData["index"][str(indexDev)]["currently time"]}
'''

    elif TypeOfResponse == 'host':
        with open(PathToJson, 'r', encoding=constants.Encoding) as FileJSON:
            JSONData = json.loads(FileJSON.read())
            indexDev = None
            for i in range(0, (len(JSONData["index"]))):
                if JSONData["index"][str(i)]["hostname"] == str(value):
                    indexDev = i
                    break

            if indexDev == None:
                answer = '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!'
            else: 
            # ** - –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –¥–∏—Å–∫–æ—Ä–¥–µ
            # __ - –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç –≤ –¥–∏—Å–∫–æ—Ä–¥–µ
                answer = f'''**–ó–∞–ø—Ä–æ—à–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–º–µ–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:** 
{JSONData["index"][str(indexDev)]["IPadd"]}
{JSONData["index"][str(indexDev)]["hostname"]}
–ü—Ä–æ—à–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: __{JSONData["index"][str(indexDev)]["past state"]}__
–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: __{JSONData["index"][str(indexDev)]["currently state"]}__
–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞: {JSONData["index"][str(indexDev)]["currently time"]}
'''

    else:
        answer = '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!'
    return answer

#-------------------------------------------MAIN-----------------------------------------------
PathToJson = constants.devicesJson
#–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ json'–∞
if os.path.exists(PathToJson) == True:
    with open(PathToJson, 'r', encoding=constants.Encoding) as File:
        try:
            getjson = json.loads(File.read())
            if len(getjson) == 0:
                print('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ json, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ AddDevices.py –∏–ª–∏ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–∞–π–ª–µ ' + PathDevicesData)
                sys.exit()
        except Exception:
            print('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ json –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—á–∏—Ç–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ AddDevices.py –∏–ª–∏ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–∞–π–ª–µ ' + PathDevicesData)
            sys.exit()
else:
    print('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ json, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ AddDevices.py –∏–ª–∏ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–∞–π–ª–µ ' + PathDevicesData)
    sys.exit()
client.loop.create_task(backgroundMonitoring())     #–∑–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
client.run(botinfo.BotToken)                        #–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞